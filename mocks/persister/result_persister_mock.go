// Code generated by mockery. DO NOT EDIT.

package persistermock

import (
	context "context"

	persister "github.com/despondency/toggl-task/internal/persister"
	mock "github.com/stretchr/testify/mock"
)

// ResultPersister is an autogenerated mock type for the ResultPersister type
type ResultPersister struct {
	mock.Mock
}

type ResultPersister_Expecter struct {
	mock *mock.Mock
}

func (_m *ResultPersister) EXPECT() *ResultPersister_Expecter {
	return &ResultPersister_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *ResultPersister) Get(ctx context.Context, id string) (*persister.ResultModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *persister.ResultModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*persister.ResultModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *persister.ResultModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persister.ResultModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultPersister_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ResultPersister_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ResultPersister_Expecter) Get(ctx interface{}, id interface{}) *ResultPersister_Get_Call {
	return &ResultPersister_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *ResultPersister_Get_Call) Run(run func(ctx context.Context, id string)) *ResultPersister_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResultPersister_Get_Call) Return(_a0 *persister.ResultModel, _a1 error) *ResultPersister_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResultPersister_Get_Call) RunAndReturn(run func(context.Context, string) (*persister.ResultModel, error)) *ResultPersister_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTags provides a mock function with given fields: ctx, tags
func (_m *ResultPersister) GetByTags(ctx context.Context, tags []string) ([]*persister.ResultModel, error) {
	ret := _m.Called(ctx, tags)

	var r0 []*persister.ResultModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*persister.ResultModel, error)); ok {
		return rf(ctx, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*persister.ResultModel); ok {
		r0 = rf(ctx, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*persister.ResultModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultPersister_GetByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTags'
type ResultPersister_GetByTags_Call struct {
	*mock.Call
}

// GetByTags is a helper method to define mock.On call
//   - ctx context.Context
//   - tags []string
func (_e *ResultPersister_Expecter) GetByTags(ctx interface{}, tags interface{}) *ResultPersister_GetByTags_Call {
	return &ResultPersister_GetByTags_Call{Call: _e.mock.On("GetByTags", ctx, tags)}
}

func (_c *ResultPersister_GetByTags_Call) Run(run func(ctx context.Context, tags []string)) *ResultPersister_GetByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *ResultPersister_GetByTags_Call) Return(_a0 []*persister.ResultModel, _a1 error) *ResultPersister_GetByTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResultPersister_GetByTags_Call) RunAndReturn(run func(context.Context, []string) ([]*persister.ResultModel, error)) *ResultPersister_GetByTags_Call {
	_c.Call.Return(run)
	return _c
}

// Persist provides a mock function with given fields: ctx, model
func (_m *ResultPersister) Persist(ctx context.Context, model *persister.ResultModel) (string, error) {
	ret := _m.Called(ctx, model)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *persister.ResultModel) (string, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *persister.ResultModel) string); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *persister.ResultModel) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultPersister_Persist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Persist'
type ResultPersister_Persist_Call struct {
	*mock.Call
}

// Persist is a helper method to define mock.On call
//   - ctx context.Context
//   - model *persister.ResultModel
func (_e *ResultPersister_Expecter) Persist(ctx interface{}, model interface{}) *ResultPersister_Persist_Call {
	return &ResultPersister_Persist_Call{Call: _e.mock.On("Persist", ctx, model)}
}

func (_c *ResultPersister_Persist_Call) Run(run func(ctx context.Context, model *persister.ResultModel)) *ResultPersister_Persist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*persister.ResultModel))
	})
	return _c
}

func (_c *ResultPersister_Persist_Call) Return(_a0 string, _a1 error) *ResultPersister_Persist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResultPersister_Persist_Call) RunAndReturn(run func(context.Context, *persister.ResultModel) (string, error)) *ResultPersister_Persist_Call {
	_c.Call.Return(run)
	return _c
}

// NewResultPersister creates a new instance of ResultPersister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResultPersister(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResultPersister {
	mock := &ResultPersister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
