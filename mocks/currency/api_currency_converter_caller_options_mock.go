// Code generated by mockery. DO NOT EDIT.

package currencymock

import (
	currency "github.com/despondency/toggl-task/internal/currency"
	mock "github.com/stretchr/testify/mock"
)

// APICurrencyConverterCallerOptions is an autogenerated mock type for the APICurrencyConverterCallerOptions type
type APICurrencyConverterCallerOptions struct {
	mock.Mock
}

type APICurrencyConverterCallerOptions_Expecter struct {
	mock *mock.Mock
}

func (_m *APICurrencyConverterCallerOptions) EXPECT() *APICurrencyConverterCallerOptions_Expecter {
	return &APICurrencyConverterCallerOptions_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *APICurrencyConverterCallerOptions) Execute(_a0 *currency.APICurrencyConverterCaller) {
	_m.Called(_a0)
}

// APICurrencyConverterCallerOptions_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type APICurrencyConverterCallerOptions_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *currency.APICurrencyConverterCaller
func (_e *APICurrencyConverterCallerOptions_Expecter) Execute(_a0 interface{}) *APICurrencyConverterCallerOptions_Execute_Call {
	return &APICurrencyConverterCallerOptions_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *APICurrencyConverterCallerOptions_Execute_Call) Run(run func(_a0 *currency.APICurrencyConverterCaller)) *APICurrencyConverterCallerOptions_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*currency.APICurrencyConverterCaller))
	})
	return _c
}

func (_c *APICurrencyConverterCallerOptions_Execute_Call) Return() *APICurrencyConverterCallerOptions_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *APICurrencyConverterCallerOptions_Execute_Call) RunAndReturn(run func(*currency.APICurrencyConverterCaller)) *APICurrencyConverterCallerOptions_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPICurrencyConverterCallerOptions creates a new instance of APICurrencyConverterCallerOptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPICurrencyConverterCallerOptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *APICurrencyConverterCallerOptions {
	mock := &APICurrencyConverterCallerOptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
