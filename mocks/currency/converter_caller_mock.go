// Code generated by mockery. DO NOT EDIT.

package currencymock

import (
	currency "github.com/despondency/toggl-task/internal/currency"
	mock "github.com/stretchr/testify/mock"
)

// ConverterCaller is an autogenerated mock type for the ConverterCaller type
type ConverterCaller struct {
	mock.Mock
}

type ConverterCaller_Expecter struct {
	mock *mock.Mock
}

func (_m *ConverterCaller) EXPECT() *ConverterCaller_Expecter {
	return &ConverterCaller_Expecter{mock: &_m.Mock}
}

// ConvertCurrency provides a mock function with given fields: req
func (_m *ConverterCaller) ConvertCurrency(req map[string]string) (*currency.ConvertResponse, error) {
	ret := _m.Called(req)

	var r0 *currency.ConvertResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) (*currency.ConvertResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) *currency.ConvertResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*currency.ConvertResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConverterCaller_ConvertCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertCurrency'
type ConverterCaller_ConvertCurrency_Call struct {
	*mock.Call
}

// ConvertCurrency is a helper method to define mock.On call
//   - req map[string]string
func (_e *ConverterCaller_Expecter) ConvertCurrency(req interface{}) *ConverterCaller_ConvertCurrency_Call {
	return &ConverterCaller_ConvertCurrency_Call{Call: _e.mock.On("ConvertCurrency", req)}
}

func (_c *ConverterCaller_ConvertCurrency_Call) Run(run func(req map[string]string)) *ConverterCaller_ConvertCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *ConverterCaller_ConvertCurrency_Call) Return(_a0 *currency.ConvertResponse, _a1 error) *ConverterCaller_ConvertCurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConverterCaller_ConvertCurrency_Call) RunAndReturn(run func(map[string]string) (*currency.ConvertResponse, error)) *ConverterCaller_ConvertCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// NewConverterCaller creates a new instance of ConverterCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverterCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConverterCaller {
	mock := &ConverterCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
