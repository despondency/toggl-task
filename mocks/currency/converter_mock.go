// Code generated by mockery. DO NOT EDIT.

package currencymock

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

type Converter_Expecter struct {
	mock *mock.Mock
}

func (_m *Converter) EXPECT() *Converter_Expecter {
	return &Converter_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: amount, _a1
func (_m *Converter) Convert(amount *big.Float, _a1 string) (*big.Float, error) {
	ret := _m.Called(amount, _a1)

	var r0 *big.Float
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Float, string) (*big.Float, error)); ok {
		return rf(amount, _a1)
	}
	if rf, ok := ret.Get(0).(func(*big.Float, string) *big.Float); ok {
		r0 = rf(amount, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Float)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Float, string) error); ok {
		r1 = rf(amount, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Converter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type Converter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - amount *big.Float
//   - _a1 string
func (_e *Converter_Expecter) Convert(amount interface{}, _a1 interface{}) *Converter_Convert_Call {
	return &Converter_Convert_Call{Call: _e.mock.On("Convert", amount, _a1)}
}

func (_c *Converter_Convert_Call) Run(run func(amount *big.Float, _a1 string)) *Converter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Float), args[1].(string))
	})
	return _c
}

func (_c *Converter_Convert_Call) Return(_a0 *big.Float, _a1 error) *Converter_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Converter_Convert_Call) RunAndReturn(run func(*big.Float, string) (*big.Float, error)) *Converter_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
