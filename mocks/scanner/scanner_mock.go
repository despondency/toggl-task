// Code generated by mockery. DO NOT EDIT.

package scannermock

import (
	context "context"

	scanner "github.com/despondency/toggl-task/internal/scanner"
	mock "github.com/stretchr/testify/mock"
)

// Scanner is an autogenerated mock type for the Scanner type
type Scanner struct {
	mock.Mock
}

type Scanner_Expecter struct {
	mock *mock.Mock
}

func (_m *Scanner) EXPECT() *Scanner_Expecter {
	return &Scanner_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function with given fields: ctx, fileContent, mimeType
func (_m *Scanner) Scan(ctx context.Context, fileContent []byte, mimeType string) (*scanner.ScannedResult, error) {
	ret := _m.Called(ctx, fileContent, mimeType)

	var r0 *scanner.ScannedResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (*scanner.ScannedResult, error)); ok {
		return rf(ctx, fileContent, mimeType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) *scanner.ScannedResult); ok {
		r0 = rf(ctx, fileContent, mimeType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scanner.ScannedResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, fileContent, mimeType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scanner_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type Scanner_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - ctx context.Context
//   - fileContent []byte
//   - mimeType string
func (_e *Scanner_Expecter) Scan(ctx interface{}, fileContent interface{}, mimeType interface{}) *Scanner_Scan_Call {
	return &Scanner_Scan_Call{Call: _e.mock.On("Scan", ctx, fileContent, mimeType)}
}

func (_c *Scanner_Scan_Call) Run(run func(ctx context.Context, fileContent []byte, mimeType string)) *Scanner_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *Scanner_Scan_Call) Return(_a0 *scanner.ScannedResult, _a1 error) *Scanner_Scan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scanner_Scan_Call) RunAndReturn(run func(context.Context, []byte, string) (*scanner.ScannedResult, error)) *Scanner_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewScanner creates a new instance of Scanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scanner {
	mock := &Scanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
