// Code generated by mockery. DO NOT EDIT.

package translatormock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	language "golang.org/x/text/language"

	translate "cloud.google.com/go/translate"
)

// Caller is an autogenerated mock type for the Caller type
type Caller struct {
	mock.Mock
}

type Caller_Expecter struct {
	mock *mock.Mock
}

func (_m *Caller) EXPECT() *Caller_Expecter {
	return &Caller_Expecter{mock: &_m.Mock}
}

// Translate provides a mock function with given fields: ctx, text, targetLanguage, opts
func (_m *Caller) Translate(ctx context.Context, text string, targetLanguage language.Tag, opts *translate.Options) ([]translate.Translation, error) {
	ret := _m.Called(ctx, text, targetLanguage, opts)

	var r0 []translate.Translation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, language.Tag, *translate.Options) ([]translate.Translation, error)); ok {
		return rf(ctx, text, targetLanguage, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, language.Tag, *translate.Options) []translate.Translation); ok {
		r0 = rf(ctx, text, targetLanguage, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]translate.Translation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, language.Tag, *translate.Options) error); ok {
		r1 = rf(ctx, text, targetLanguage, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Caller_Translate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Translate'
type Caller_Translate_Call struct {
	*mock.Call
}

// Translate is a helper method to define mock.On call
//   - ctx context.Context
//   - text string
//   - targetLanguage language.Tag
//   - opts *translate.Options
func (_e *Caller_Expecter) Translate(ctx interface{}, text interface{}, targetLanguage interface{}, opts interface{}) *Caller_Translate_Call {
	return &Caller_Translate_Call{Call: _e.mock.On("Translate", ctx, text, targetLanguage, opts)}
}

func (_c *Caller_Translate_Call) Run(run func(ctx context.Context, text string, targetLanguage language.Tag, opts *translate.Options)) *Caller_Translate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(language.Tag), args[3].(*translate.Options))
	})
	return _c
}

func (_c *Caller_Translate_Call) Return(_a0 []translate.Translation, _a1 error) *Caller_Translate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Caller_Translate_Call) RunAndReturn(run func(context.Context, string, language.Tag, *translate.Options) ([]translate.Translation, error)) *Caller_Translate_Call {
	_c.Call.Return(run)
	return _c
}

// NewCaller creates a new instance of Caller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Caller {
	mock := &Caller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
