// Code generated by mockery. DO NOT EDIT.

package servicemock

import (
	context "context"

	persister "github.com/despondency/toggl-task/internal/persister"
	mock "github.com/stretchr/testify/mock"
)

// ReceiptServicer is an autogenerated mock type for the ReceiptServicer type
type ReceiptServicer struct {
	mock.Mock
}

type ReceiptServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceiptServicer) EXPECT() *ReceiptServicer_Expecter {
	return &ReceiptServicer_Expecter{mock: &_m.Mock}
}

// CreateReceipt provides a mock function with given fields: ctx, fileName, fileContent, mimeType
func (_m *ReceiptServicer) CreateReceipt(ctx context.Context, fileName string, fileContent []byte, mimeType string) (string, error) {
	ret := _m.Called(ctx, fileName, fileContent, mimeType)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, string) (string, error)); ok {
		return rf(ctx, fileName, fileContent, mimeType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, string) string); ok {
		r0 = rf(ctx, fileName, fileContent, mimeType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, string) error); ok {
		r1 = rf(ctx, fileName, fileContent, mimeType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiptServicer_CreateReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReceipt'
type ReceiptServicer_CreateReceipt_Call struct {
	*mock.Call
}

// CreateReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - fileName string
//   - fileContent []byte
//   - mimeType string
func (_e *ReceiptServicer_Expecter) CreateReceipt(ctx interface{}, fileName interface{}, fileContent interface{}, mimeType interface{}) *ReceiptServicer_CreateReceipt_Call {
	return &ReceiptServicer_CreateReceipt_Call{Call: _e.mock.On("CreateReceipt", ctx, fileName, fileContent, mimeType)}
}

func (_c *ReceiptServicer_CreateReceipt_Call) Run(run func(ctx context.Context, fileName string, fileContent []byte, mimeType string)) *ReceiptServicer_CreateReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(string))
	})
	return _c
}

func (_c *ReceiptServicer_CreateReceipt_Call) Return(_a0 string, _a1 error) *ReceiptServicer_CreateReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceiptServicer_CreateReceipt_Call) RunAndReturn(run func(context.Context, string, []byte, string) (string, error)) *ReceiptServicer_CreateReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// GetReceipt provides a mock function with given fields: ctx, uuid
func (_m *ReceiptServicer) GetReceipt(ctx context.Context, uuid string) (*persister.ResultModel, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *persister.ResultModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*persister.ResultModel, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *persister.ResultModel); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persister.ResultModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiptServicer_GetReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceipt'
type ReceiptServicer_GetReceipt_Call struct {
	*mock.Call
}

// GetReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *ReceiptServicer_Expecter) GetReceipt(ctx interface{}, uuid interface{}) *ReceiptServicer_GetReceipt_Call {
	return &ReceiptServicer_GetReceipt_Call{Call: _e.mock.On("GetReceipt", ctx, uuid)}
}

func (_c *ReceiptServicer_GetReceipt_Call) Run(run func(ctx context.Context, uuid string)) *ReceiptServicer_GetReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ReceiptServicer_GetReceipt_Call) Return(_a0 *persister.ResultModel, _a1 error) *ReceiptServicer_GetReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceiptServicer_GetReceipt_Call) RunAndReturn(run func(context.Context, string) (*persister.ResultModel, error)) *ReceiptServicer_GetReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewReceiptServicer creates a new instance of ReceiptServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceiptServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceiptServicer {
	mock := &ReceiptServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
