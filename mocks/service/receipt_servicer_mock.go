// Code generated by mockery. DO NOT EDIT.

package servicemock

import (
	context "context"

	model "github.com/despondency/toggl-task/internal/model"
	mock "github.com/stretchr/testify/mock"

	service "github.com/despondency/toggl-task/internal/service"
)

// ReceiptServicer is an autogenerated mock type for the ReceiptServicer type
type ReceiptServicer struct {
	mock.Mock
}

type ReceiptServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceiptServicer) EXPECT() *ReceiptServicer_Expecter {
	return &ReceiptServicer_Expecter{mock: &_m.Mock}
}

// CreateReceipt provides a mock function with given fields: ctx, payload
func (_m *ReceiptServicer) CreateReceipt(ctx context.Context, payload *service.UploadPayload) (*model.Receipt, error) {
	ret := _m.Called(ctx, payload)

	var r0 *model.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.UploadPayload) (*model.Receipt, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.UploadPayload) *model.Receipt); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.UploadPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiptServicer_CreateReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReceipt'
type ReceiptServicer_CreateReceipt_Call struct {
	*mock.Call
}

// CreateReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - payload *service.UploadPayload
func (_e *ReceiptServicer_Expecter) CreateReceipt(ctx interface{}, payload interface{}) *ReceiptServicer_CreateReceipt_Call {
	return &ReceiptServicer_CreateReceipt_Call{Call: _e.mock.On("CreateReceipt", ctx, payload)}
}

func (_c *ReceiptServicer_CreateReceipt_Call) Run(run func(ctx context.Context, payload *service.UploadPayload)) *ReceiptServicer_CreateReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.UploadPayload))
	})
	return _c
}

func (_c *ReceiptServicer_CreateReceipt_Call) Return(_a0 *model.Receipt, _a1 error) *ReceiptServicer_CreateReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceiptServicer_CreateReceipt_Call) RunAndReturn(run func(context.Context, *service.UploadPayload) (*model.Receipt, error)) *ReceiptServicer_CreateReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// GetReceipt provides a mock function with given fields: ctx, uuid
func (_m *ReceiptServicer) GetReceipt(ctx context.Context, uuid string) (*model.Receipt, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *model.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Receipt, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Receipt); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiptServicer_GetReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceipt'
type ReceiptServicer_GetReceipt_Call struct {
	*mock.Call
}

// GetReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *ReceiptServicer_Expecter) GetReceipt(ctx interface{}, uuid interface{}) *ReceiptServicer_GetReceipt_Call {
	return &ReceiptServicer_GetReceipt_Call{Call: _e.mock.On("GetReceipt", ctx, uuid)}
}

func (_c *ReceiptServicer_GetReceipt_Call) Run(run func(ctx context.Context, uuid string)) *ReceiptServicer_GetReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ReceiptServicer_GetReceipt_Call) Return(_a0 *model.Receipt, _a1 error) *ReceiptServicer_GetReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceiptServicer_GetReceipt_Call) RunAndReturn(run func(context.Context, string) (*model.Receipt, error)) *ReceiptServicer_GetReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// GetReceiptsByTags provides a mock function with given fields: ctx, tags
func (_m *ReceiptServicer) GetReceiptsByTags(ctx context.Context, tags []string) ([]*model.Receipt, error) {
	ret := _m.Called(ctx, tags)

	var r0 []*model.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*model.Receipt, error)); ok {
		return rf(ctx, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*model.Receipt); ok {
		r0 = rf(ctx, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiptServicer_GetReceiptsByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceiptsByTags'
type ReceiptServicer_GetReceiptsByTags_Call struct {
	*mock.Call
}

// GetReceiptsByTags is a helper method to define mock.On call
//   - ctx context.Context
//   - tags []string
func (_e *ReceiptServicer_Expecter) GetReceiptsByTags(ctx interface{}, tags interface{}) *ReceiptServicer_GetReceiptsByTags_Call {
	return &ReceiptServicer_GetReceiptsByTags_Call{Call: _e.mock.On("GetReceiptsByTags", ctx, tags)}
}

func (_c *ReceiptServicer_GetReceiptsByTags_Call) Run(run func(ctx context.Context, tags []string)) *ReceiptServicer_GetReceiptsByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *ReceiptServicer_GetReceiptsByTags_Call) Return(_a0 []*model.Receipt, _a1 error) *ReceiptServicer_GetReceiptsByTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceiptServicer_GetReceiptsByTags_Call) RunAndReturn(run func(context.Context, []string) ([]*model.Receipt, error)) *ReceiptServicer_GetReceiptsByTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewReceiptServicer creates a new instance of ReceiptServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceiptServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceiptServicer {
	mock := &ReceiptServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
